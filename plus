un singloton : single = simple. c'une class qui a une specifité d'etre instancier une seul fois alors tout au long on n'aura pas avoir plusieur instance de notre objet.


Le Singleton, permet d'avoir une classe qui sera instanciée qu'une seule fois tout au long de notre application. Par exemple, dans le cadre de notre application nous auront une seule et unique configuration. On va donc chercher à instancier cette objet une seule fois pour pouvoir ensuite récupérer l'instance à tout moment de notre application.

Pourquoi pas une classe statique ?
On peut tout de suite se poser la question de l'utilité d'un tel design pattern lorsque l'on a la possibilité de créer des attributs et des méthodes statiques. Il y a plusieurs problèmes à l'utilisation du statique :

On ne dispose d'aucun constructeur pour y placer la logique d'initialisation
Le code sera plus difficilement testable par la suite
Lhéritage est un véritable enfer
Comment marche le Singleton
Pour créer un singleton nous allons devoir utiliser plusieurs choses

Un attribut statique qui conservera l'instance unique de notre classe
Une méthode statique qui permet d'instancier l'objet ou de récupérer l'instance unique déjà créée
Un constructeur privé si on souhaite empêcher l'instanciation en dehors de la classe


 ///////////////////////////////////////////////////////////////////////////////////
Le Factory est un design pattern incontournable qui va vous permettre de beaucoup mieux structurer vos classes. Le principe est d'avoir une classe qui va se charger de créer les objets dont on a besoin.

Un anneau pour les gouverner tous
Pour commencer nous allons prendre un exemple simple.